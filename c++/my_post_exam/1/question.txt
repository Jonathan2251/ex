In compiler domain, the first step in scheduling for tasks or resources assigning may comes from knowing the possible combinations for sub-tasks.
This can be reduced to POWER SET in mathmatic problem. Write a C++ program for POWER SET as follows,
 
The POWER SET of ( a b c d e f )
> Φ

> 1 element :
( a )  ( b )  ( c )  ( d )  ( e )  ( f )  

> 2 elements :
( a b )  ( a c )  ( a d )  ( a e )  ( a f )  ( b c )  ( b d )  ( b e )  ( b f )  ( c d )  ( c e )  ( c f )  ( d e )  ( d f )  ( e f )  

> 3 elements :
( a b c )  ( a b d )  ( a b e )  ( a b f )  ( a c d )  ( a c e )  ( a c f )  ( a d e )  ( a d f )  ( a e f )  ( b c d )  ( b c e )  ( b c f )  ( b d e )  ( b d f )  ( b e f )  ( c d e )  ( c d f )  ( c e f )  ( d e f )  

> 4 elements :
( a b c d )  ( a b c e )  ( a b c f )  ( a b d e )  ( a b d f )  ( a b e f )  ( a c d e )  ( a c d f )  ( a c e f )  ( a d e f )  ( b c d e )  ( b c d f )  ( b c e f )  ( b d e f )  ( c d e f )  

> 5 elements :
( a b c d e )  ( a b c d f )  ( a b c e f )  ( a b d e f )  ( a c d e f )  ( b c d e f )  

> 6 elements :
( a b c d e f )  


The POWER SET of ( 1 2 3 4 )
> Φ

> 1 element :
( 1 )  ( 2 )  ( 3 )  ( 4 )  

> 2 elements :
( 1 2 )  ( 1 3 )  ( 1 4 )  ( 2 3 )  ( 2 4 )  ( 3 4 )  

> 3 elements :
( 1 2 3 )  ( 1 2 4 )  ( 1 3 4 )  ( 2 3 4 )  

> 4 elements :
( 1 2 3 4 )  


The POWER SET of ( c d e )
> Φ

> 1 element :
( c )  ( d )  ( e )  

> 2 elements :
( c d )  ( c e )  ( d e )  

> 3 elements :
( c d e )  

